# Cartrita V2 Multi-Agent OS - Enhanced Architecture
# Docker Compose configuration for full monorepo setup
version: '3.8'

networks:
  cartrita-v2:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data_v2:
  redis_data_v2:
  elasticsearch_data:
  faiss_data:
  prometheus_data:
  grafana_data:
  uploads_data:

services:
  # Database Services
  postgres:
    image: pgvector/pgvector:pg15
    container_name: cartrita-postgres-v2
    environment:
      POSTGRES_DB: cartrita_v2
      POSTGRES_USER: cartrita
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-cartrita_secure_pass}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_data_v2:/var/lib/postgresql/data
      - ./db-init:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    networks:
      cartrita-v2:
        ipv4_address: 172.20.0.10
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cartrita -d cartrita_v2"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: cartrita-redis-v2
    command: >
      redis-server 
      --appendonly yes 
      --requirepass ${REDIS_PASSWORD:-cartrita_redis_pass}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data_v2:/data
    ports:
      - "6380:6379"
    networks:
      cartrita-v2:
        ipv4_address: 172.20.0.11
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # Search & Vector Database
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: cartrita-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9201:9200"
      - "9301:9300"
    networks:
      cartrita-v2:
        ipv4_address: 172.20.0.12
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Python FAISS Service
  faiss-service:
    build:
      context: ./py/faiss-service
      dockerfile: Dockerfile
    container_name: cartrita-faiss
    environment:
      - PORT=8002
      - REDIS_URL=redis://:${REDIS_PASSWORD:-cartrita_redis_pass}@redis:6379/2
      - FAISS_MODEL_NAME=all-MiniLM-L6-v2
      - FAISS_EMBEDDING_DIM=384
      - FAISS_INDEX_PATH=/data/faiss_index
      - ENVIRONMENT=production
    volumes:
      - faiss_data:/data
    ports:
      - "8002:8002"
      - "8003:8001"  # Prometheus metrics
    depends_on:
      redis:
        condition: service_healthy
    networks:
      cartrita-v2:
        ipv4_address: 172.20.0.13
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Core Application Services
  backend-v2:
    build:
      context: .
      dockerfile: Dockerfile.backend-v2
      target: production
    container_name: cartrita-backend-v2
    environment:
      - NODE_ENV=production
      - PORT=8001
      - DATABASE_URL=postgresql://cartrita:${POSTGRES_PASSWORD:-cartrita_secure_pass}@postgres:5432/cartrita_v2
      - REDIS_URL=redis://:${REDIS_PASSWORD:-cartrita_redis_pass}@redis:6379/0
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - FAISS_SERVICE_URL=http://faiss-service:8002
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      - SESSION_SECRET=${SESSION_SECRET:-your-super-secret-session-key}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY}
      - DEEPGRAM_API_KEY=${DEEPGRAM_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - OTEL_SERVICE_NAME=cartrita-backend-v2
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:14268/api/traces
    volumes:
      - uploads_data:/app/uploads
      - ./logs:/app/logs
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      faiss-service:
        condition: service_healthy
    networks:
      cartrita-v2:
        ipv4_address: 172.20.0.20
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  frontend-v2:
    build:
      context: .
      dockerfile: Dockerfile.frontend-v2
      target: production
    container_name: cartrita-frontend-v2
    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://localhost:8001
      - VITE_WS_URL=ws://localhost:8001
      - VITE_APP_VERSION=2.0.0
      - VITE_ENVIRONMENT=production
    ports:
      - "3001:80"
    depends_on:
      - backend-v2
    networks:
      cartrita-v2:
        ipv4_address: 172.20.0.21
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Worker Services
  worker:
    build:
      context: ./apps/worker
      dockerfile: Dockerfile
    container_name: cartrita-worker
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://cartrita:${POSTGRES_PASSWORD:-cartrita_secure_pass}@postgres:5432/cartrita_v2
      - REDIS_URL=redis://:${REDIS_PASSWORD:-cartrita_redis_pass}@redis:6379/1
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY}
      - OTEL_SERVICE_NAME=cartrita-worker
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      cartrita-v2:
        ipv4_address: 172.20.0.22
    restart: unless-stopped

  # RAG Service
  rag-service:
    build:
      context: ./apps/rag-service
      dockerfile: Dockerfile
    container_name: cartrita-rag
    environment:
      - NODE_ENV=production
      - PORT=8004
      - DATABASE_URL=postgresql://cartrita:${POSTGRES_PASSWORD:-cartrita_secure_pass}@postgres:5432/cartrita_v2
      - REDIS_URL=redis://:${REDIS_PASSWORD:-cartrita_redis_pass}@redis:6379/3
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - FAISS_SERVICE_URL=http://faiss-service:8002
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OTEL_SERVICE_NAME=cartrita-rag
    ports:
      - "8004:8004"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      faiss-service:
        condition: service_healthy
    networks:
      cartrita-v2:
        ipv4_address: 172.20.0.23
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Monitoring & Observability
  jaeger:
    image: jaegertracing/all-in-one:1.50
    container_name: cartrita-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    ports:
      - "16686:16686"  # Jaeger UI
      - "14250:14250"  # gRPC
      - "14268:14268"  # HTTP
      - "6831:6831/udp"  # UDP
      - "6832:6832/udp"  # UDP
    networks:
      cartrita-v2:
        ipv4_address: 172.20.0.30
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: cartrita-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      cartrita-v2:
        ipv4_address: 172.20.0.31
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: cartrita-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=redis-datasource,elasticsearch-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      cartrita-v2:
        ipv4_address: 172.20.0.32
    restart: unless-stopped

  # Development & Testing Services (only in development)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: cartrita-mailhog
    ports:
      - "8025:8025"  # Web UI
      - "1025:1025"  # SMTP
    networks:
      cartrita-v2:
        ipv4_address: 172.20.0.40
    profiles: ["development"]

  # Load Balancer (for production scaling)
  nginx:
    image: nginx:alpine
    container_name: cartrita-nginx
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend-v2
      - frontend-v2
    networks:
      cartrita-v2:
        ipv4_address: 172.20.0.50
    profiles: ["production"]
    restart: unless-stopped

  # Backup Service
  backup:
    image: prodrigestivill/postgres-backup-local
    container_name: cartrita-backup
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=cartrita_v2
      - POSTGRES_USER=cartrita
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-cartrita_secure_pass}
      - POSTGRES_EXTRA_OPTS=-Z9 --schema=public --blobs
      - SCHEDULE=@daily
      - BACKUP_KEEP_DAYS=7
      - BACKUP_KEEP_WEEKS=4
      - BACKUP_KEEP_MONTHS=6
    volumes:
      - ./backups:/backups
    depends_on:
      - postgres
    networks:
      - cartrita-v2
    profiles: ["production"]
    restart: unless-stopped