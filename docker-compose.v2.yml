
services:
  # PostgreSQL Database with pgvector extension
  postgres:
    image: ankane/pgvector
    container_name: cartrita-postgres
    environment:
      POSTGRES_DB: dat-bitch-cartrita
      POSTGRES_USER: robert
      POSTGRES_PASSWORD: punky1
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./packages/cartrita-v2/db-init:/docker-entrypoint-initdb.d
    networks:
      - cartrita-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U robert -d dat-bitch-cartrita"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache for cross-language state management
  redis:
    image: redis:7-alpine
    container_name: cartrita-redis
    command: redis-server --appendonly yes --requirepass ""
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cartrita-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Fastify Backend Service (MCP Orchestrator + V2 API)
  fastify-backend:
    build:
      context: ./packages/cartrita-v2
      dockerfile: Dockerfile.fastify
    container_name: cartrita-fastify-backend
    environment:
      NODE_ENV: development
      PORT: 8001
      DATABASE_URL: postgresql://robert:punky1@postgres:5432/dat-bitch-cartrita
      REDIS_URL: redis://redis:6379
      
      # OpenAI Configuration
      OPENAI_API_KEY: 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
      OPENAI_MODEL: gpt-4o
      OPENAI_EMBEDDING_MODEL: text-embedding-3-small
      OPENAI_RPM_LIMIT: 60
      OPENAI_TPM_LIMIT: 90000
      OPENAI_CONCURRENT_LIMIT: 10
      
      # LangChain Configuration
      LANGCHAIN_TRACING_V2: "false"
      LANGCHAIN_API_KEY: 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
      
      # Security
      JWT_SECRET: cartrita-super-secret-jwt-key-that-should-be-changed-in-production-2024
      JWT_EXPIRY: 72h
      ENCRYPTION_MASTER_KEY: cartrita-master-encryption-key-change-in-production
      
      # External APIs
      GITHUB_TOKEN: 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
      HUGGINGFACE_API_KEY: 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
      HF_TOKEN: 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
      DEEPGRAM_API_KEY: 101b0f4a2a1a2b50fbc09efd7d10ee73a18ad398
      
      # Feature Flags
      ENABLE_VECTOR_SEARCH: "true"
      ENABLE_MCP_INTEGRATION: "true"
      
      # Observability
      OTEL_EXPORTER_OTLP_ENDPOINT: http://jaeger:14268
      OTEL_SERVICE_NAME: cartrita-nodejs-backend
      LOG_LEVEL: info
      
      # Vector Configuration
      VECTOR_DIMENSION: 1536
      EMBEDDING_MODEL: text-embedding-3-large
      EMBEDDING_DIMENSION: 1536
      VECTOR_INDEX_TYPE: hnsw
      
      # Cross-language communication
      PYTHON_SERVICE_URL: http://fastapi-backend:8002
      MCP_SOCKET_PATH: /tmp/cartrita_mcp.sock
      
    ports:
      - "8001:8001"
    volumes:
      - ./packages/cartrita-v2/backend:/app
      - /app/node_modules
      - mcp_socket:/tmp
      - upload_data:/app/uploads
    networks:
      - cartrita-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Backend Service (AI/ML + MCP Copilot Delegation)
  fastapi-backend:
    build:
      context: ./packages/cartrita-v2
      dockerfile: Dockerfile.fastapi
    container_name: cartrita-python-backend
    environment:
      ENVIRONMENT: development
      PORT: 8002
      DATABASE_URL: postgresql://robert:punky1@postgres:5432/dat-bitch-cartrita
      REDIS_URL: redis://redis:6379
      
      # OpenAI Configuration (shared with Node.js)
      OPENAI_API_KEY: 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
      
      # HuggingFace Configuration
      HUGGINGFACE_API_KEY: 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
      HF_TOKEN: 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
      
      # FAISS Configuration
      FAISS_MODEL_NAME: all-MiniLM-L6-v2
      FAISS_EMBEDDING_DIM: 384
      FAISS_INDEX_PATH: /data/faiss_index
      
      # MCP Configuration
      MCP_SOCKET_PATH: /tmp/cartrita_mcp.sock
      NODE_SERVICE_URL: http://fastify-backend:8001
      PYTHON_SERVICE_PORT: 8002
      
      # Observability
      JAEGER_ENDPOINT: http://jaeger:14268
      JAEGER_HOST: jaeger
      JAEGER_PORT: 6831
      
      # ML/AI Configuration
      TORCH_HOME: /app/.cache/torch
      TRANSFORMERS_CACHE: /app/.cache/transformers
      
    ports:
      - "8002:8002"
      - "8001:8001"  # Prometheus metrics
    volumes:
      - ./packages/cartrita-v2/py:/app
      - ./packages/cartrita-v2/copilot-instructions.md:/app/copilot-instructions.md
      - mcp_socket:/tmp
      - faiss_data:/data
      - ml_cache:/app/.cache
    networks:
      - cartrita-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  # V2 Frontend (React + Vite)
  frontend:
    build:
      context: ./packages/cartrita-v2
      dockerfile: frontend/Dockerfile
    container_name: cartrita-frontend
    environment:
      VITE_BACKEND_URL: http://localhost:8001
      VITE_PYTHON_BACKEND_URL: http://localhost:8002
      VITE_NODE_ENV: development
    ports:
      - "3000:3000"
    volumes:
      - ./packages/cartrita-v2/frontend:/app
      - /app/node_modules
    networks:
      - cartrita-network
    depends_on:
      - fastify-backend
      - fastapi-backend

  # Nginx Load Balancer and API Gateway
  nginx:
    image: nginx:alpine
    container_name: cartrita-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx-hybrid.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
    networks:
      - cartrita-network
    depends_on:
      - fastify-backend
      - fastapi-backend
      - frontend
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: cartrita-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
    networks:
      - cartrita-network

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: cartrita-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - cartrita-network

  # Grafana for Monitoring Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: cartrita-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - cartrita-network
    depends_on:
      - prometheus

  # PgAdmin for Database Management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: cartrita-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@cartrita.dev
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - cartrita-network
    depends_on:
      - postgres

  # Redis Commander for Redis Management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: cartrita-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    networks:
      - cartrita-network
    depends_on:
      - redis

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  faiss_data:
    driver: local
  ml_cache:
    driver: local
  mcp_socket:
    driver: local
  upload_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  cartrita-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
