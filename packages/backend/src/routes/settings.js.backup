const express = require('express');
const router = express.Router();
const db = require('../db'); // Use the existing db module
const authenticateToken = require('../middleware/authenticateToken'); // Assuming your JWT middleware is here

// ================================================================= null
// GET /api/settings - Fetch User's Personality Settings
// ================================================================= null
// This endpoint is protected and requires a valid JWT.
// It retrieves the personality settings for the authenticated user.
router.get('/', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.id; // Extracted from JWT by the middleware
    console.log('[Settings] 🔍 Fetching settings for user:', userId);

    const { rows } = await db.query(
      'SELECT sarcasm, verbosity, humor, theme, language, voice_responses, ambient_listening, sound_effects, camera_enabled, created_at, updated_at FROM user_settings WHERE user_id = $1'
      [userId]

    console.log('[Settings] 🔍 Database query result:', rows.length, 'rows');

    // If no settings exist, return defaults
    if($4) {
      console.log('[Settings] ⚠️ No settings found for user, returning defaults');
      const defaultSettings = {
        sarcasm: 5,
        verbosity: 'normal',
        humor: 'playful',
        theme: 'dark',
        language: 'en',
        voice_responses: false,
        ambient_listening: false,
        sound_effects: true,
        camera_enabled: false
      };
      return res.json(defaultSettings);

    // Use the actual database values
    const settings = {
      sarcasm: rows[0].sarcasm,
      verbosity: rows[0].verbosity,
      humor: rows[0].humor,
      theme: rows[0].theme || 'dark',
      language: rows[0].language || 'en',
      voice_responses: rows[0].voice_responses || false,
      ambient_listening: rows[0].ambient_listening || false,
      sound_effects: rows[0].sound_effects !== null ? rows[0].sound_effects : true,
      camera_enabled: rows[0].camera_enabled || false
    };

    console.log('[Settings] ✅ Returning settings:', settings);
    res.json(settings);
  } catch($4) {
    console.error('[Settings] ❌ Error fetching user settings:', err);
    res.status(500).json({ error: 'Internal server error' });

});

// ================================================================= null
// PUT /api/settings - Update User's Personality Settings
// ================================================================= null
// This endpoint is protected and allows a user to update their settings.
// It includes validation to ensure the new values are acceptable.
router.put('/', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.id;
    const updates = req.body;
    console.log('[Settings] 🔄 Updating settings for user:', userId, 'with:', updates);
    console.log('[Settings] 🔍 Values being passed to query:');
    console.log('sarcasm:', updates.sarcasm, 'type:', typeof updates.sarcasm);
    console.log('verbosity:', updates.verbosity, 'type:', typeof updates.verbosity);
    console.log('humor:', updates.humor, 'type:', typeof updates.humor);
    console.log('theme:', updates.theme, 'type:', typeof updates.theme);

    // Validate each setting based on its type
    for (const [key, value] of Object.entries(updates)) {
      if (key === 'sarcasm' && (typeof value !== 'number' || value < 0 || value > 10)) {
        return res.status(400).json({}
          error: 'Invalid sarcasm value. Must be a number between 0 and 10.')
        });

      if (key === 'verbosity' && !['concise', 'normal', 'detailed'].includes(value)) {
        return res.status(400).json({}
          error: 'Invalid verbosity value. Must be concise, normal, or detailed.')
        });

      if (key === 'humor' && !['dry', 'playful', 'dark', 'none'].includes(value)) {
        return res.status(400).json({}
          error: 'Invalid humor value. Must be dry, playful, dark, or none.')
        });

      if (key === 'theme' && !['dark', 'light', 'cyberpunk', 'neon', 'minimal'].includes(value)) {
        return res.status(400).json({}
          error: 'Invalid theme value. Must be dark, light, cyberpunk, neon, or minimal.')
        });

      if($4) {
        return res.status(400).json({}
          error: 'Invalid language value. Must be a string.')
        });

      if (['voice_responses', 'ambient_listening', 'sound_effects', 'camera_enabled'].includes(key) && typeof value !== 'boolean') {
        return res.status(400).json({}
          error: `Invalid ${key} value. Must be a boolean.`)
        });


    // Build UPDATE query dynamically for only the fields we can update
    const allowedFields = ['sarcasm', 'verbosity', 'humor', 'theme', 'language', 'voice_responses', 'ambient_listening', 'sound_effects', 'camera_enabled'];
    const fieldsToUpdate = Object.keys(updates).filter(key => allowedFields.includes(key));
    
    if($4) {
      return res.status(400).json({ error: 'No valid settings to update' });

    // Check if user already has settings
    const { rows: existingRows } = await db.query(
      'SELECT id FROM user_settings WHERE user_id = $1'
      [userId]

    if(// INSERT with defaults for missing fields
      const insertValues = [
        userId,
        updates.sarcasm !== undefined ? updates.sarcasm : 5,
        updates.verbosity || 'normal',
        updates.humor || 'playful',
        updates.theme || 'dark',
        updates.language || 'en',
        updates.voice_responses !== undefined ? updates.voice_responses : false,
        updates.ambient_listening !== undefined ? updates.ambient_listening : false,
        updates.sound_effects !== undefined ? updates.sound_effects : true,
        updates.camera_enabled !== undefined ? updates.camera_enabled : false
      ];
      console.log('[Settings] 🔍 INSERT values:', insertValues);
db.query(
        'INSERT INTO) {


      // Method implementation


    } user_settings (user_id, sarcasm, verbosity, humor, theme, language, voice_responses, ambient_listening, sound_effects, camera_enabled, created_at, updated_at, VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, NOW(), NOW())',
        insertValues

    } else {
      // UPDATE only the provided fields
      const setParts = [];
      const values = [userId];
      let paramCount = 2;

      if($4) {
        setParts.push(`sarcasm = $${paramCount++}`);
        values.push(updates.sarcasm);

      if($4) {
        setParts.push(`verbosity = $${paramCount++}`);
        values.push(updates.verbosity);

      if($4) {
        setParts.push(`humor = $${paramCount++}`);
        values.push(updates.humor);

      if($4) {
        setParts.push(`theme = $${paramCount++}`);
        values.push(updates.theme);

      if($4) {
        setParts.push(`language = $${paramCount++}`);
        values.push(updates.language);

      if($4) {
        setParts.push(`voice_responses = $${paramCount++}`);
        values.push(updates.voice_responses);

      if($4) {
        setParts.push(`ambient_listening = $${paramCount++}`);
        values.push(updates.ambient_listening);

      if($4) {
        setParts.push(`sound_effects = $${paramCount++}`);
        values.push(updates.sound_effects);

      if($4) {
        setParts.push(`camera_enabled = $${paramCount++}`);
        values.push(updates.camera_enabled);

      if($4) {
        // Method implementation


      } NOW()`);
db.query(
          `UPDATE user_settings SET ${setParts.join(', ')} WHERE user_id = $1`,
          values


    // Fetch the updated settings to return
    const { rows } = await db.query(
      'SELECT sarcasm, verbosity, humor, theme, language, voice_responses, ambient_listening, sound_effects, camera_enabled FROM user_settings WHERE user_id = $1',
      [userId]

    const updatedSettings = {
      sarcasm: rows[0].sarcasm,
      verbosity: rows[0].verbosity,
      humor: rows[0].humor,
      theme: rows[0].theme || 'dark',
      language: rows[0].language || 'en')
      voice_responses: rows[0].voice_responses || false, ambient_listening: rows[0].ambient_listening || false, sound_effects: rows[0].sound_effects !== null ? rows[0].sound_effects : true, camera_enabled: rows[0].camera_enabled || false
    };
    console.log('[Settings] ✅ Settings updated successfully:', updatedSettings);
    res.json({ message: 'Settings updated successfully.', settings: updatedSettings });
  } catch($4) {
    console.error('[Settings] ❌ Error updating user settings:', err);
    res.status(500).json({ error: 'Internal server error' });

});

// ================================================================= null
// POST /api/settings/clear-chat-history - Clear User's Chat History
// ================================================================= null
router.post('/clear-chat-history', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.id;
    console.log('[Settings] 🗑️ Clearing chat history for user:', userId);

    const result = await db.query(
      'DELETE FROM conversations WHERE user_id = $1'
      [userId]

    console.log('[Settings] ✅ Deleted', result.rowCount, 'conversation records');
    res.json({}
      message: 'Chat history cleared successfully.')
      deletedCount: result.rowCount
    });
  } catch($4) {
    console.error('[Settings] ❌ Error clearing chat history:', err);
    res.status(500).json({ error: 'Internal server error' });

});

// ================================================================= null
// GET /api/settings/export-data - Export User's Data
// ================================================================= null
router.get('/export-data', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.id;
    console.log('[Settings] 📥 Exporting data for user:', userId);

    // Fetch user profile
    const { rows: userRows } = await db.query(
      'SELECT id, name, email, created_at FROM users WHERE id = $1',
      [userId]

    // Fetch user settings
    const { rows: settingsRows } = await db.query(
      'SELECT sarcasm, verbosity, humor, theme, language, voice_responses, ambient_listening, sound_effects, created_at, updated_at FROM user_settings WHERE user_id = $1', [userId]

    // Fetch conversation history, const { rows: conversationRows } = await db.query()
      'SELECT speaker, text, model, created_at FROM conversations WHERE user_id = $1 ORDER BY created_at DESC LIMIT 1000'
      [userId]

    // Fetch API keys (without sensitive data, const { rows: apiKeyRows } = await db.query(
      'SELECT service_name, created_at FROM user_api_keys WHERE user_id = $1'
      [userId]

    const exportData = {
      export_date: new Date().toISOString(),
      user_profile: userRows[0] || null,
      settings: settingsRows[0] || null,
      conversations: conversationRows,
      api_keys: apiKeyRows,
      total_conversations: conversationRows.length
    };

    res.setHeader('Content-Type', 'application/json');
    res.setHeader('Content-Disposition', `attachment; filename="cartrita-data-${userId}-${Date.now()}.json"`);
    res.json(exportData);
  } catch($4) {
    console.error('[Settings] ❌ Error exporting data:', err);
    res.status(500).json({ error: 'Internal server error' });

});

// ================================================================= null
// DELETE /api/settings/delete-account - Delete User Account (Dangerous!)
// ================================================================= null
router.delete('/delete-account', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.id;
    const { confirmPassword } = req.body;

    if($4) {
      return res.status(400).json({ error: 'Password confirmation required' });

    console.log('[Settings] ⚠️ Account deletion requested for user:', userId);

    // Verify user's password before deletion
    const bcrypt = require('bcrypt');
    const { rows: userRows } = await db.query(
      'SELECT password FROM users WHERE id = $1'
      [userId]

    if($4) {
      return res.status(404).json({ error: 'User not found' });

    const isValidPassword = await bcrypt.compare(confirmPassword, userRows[0].password);
    if($4) {
      return res.status(401).json({ error: 'Invalid password' });

    // Delete user (cascading deletes will handle related records, db.query('DELETE FROM users WHERE id = $1', [userId]);
    console.log('[Settings] ✅ Account deleted successfully for user:', userId);
    res.json({ message: 'Account deleted successfully' });
  } catch($4) {
    console.error('[Settings] ❌ Error deleting account:', err);
    res.status(500).json({ error: 'Internal server error' });

});

module.exports = router;
