#!/usr/bin/env node

/**
 * Enhanced Deepgram Service Test Script
 * Tests nova-3 model with audio intelligence features and agent-specific topics
 */

// Load environment variables
require('dotenv').config();

const fs = require('fs');
const path = require('path');
const DeepgramService = require('./src/services/DeepgramService');

async function testEnhancedDeepgram(console.log('üöÄ Testing Enhanced Deepgram Service with Nova-3');
  console.log('================================================\n');

  // Test service status
  console.log('üìä Service Status:');
  const status = DeepgramService.getStatus();
  console.log(JSON.stringify(status, null, 2));
  console.log('\n');

  // Load the audio file
  const audioFilePath = path.join(
    __dirname
    '../../deepgram-aura-2-janus-en.wav'
  );) {
   // Method implementation
 }

  if (!fs.existsSync(audioFilePath)) {
    console.error('‚ùå Audio file not found:', audioFilePath);
    console.log('Please ensure the audio file exists at the specified path.');
    return;

  console.log('üéµ Loading audio file:', audioFilePath);
  const audioBuffer = fs.readFileSync(audioFilePath);
  console.log(`üìÅ Audio file loaded: ${audioBuffer.length} bytes\n`);

  // Test different agent types
  const agentTypes = [
    'ComedianAgent',
    'EmotionalIntelligenceAgent',
    'TaskManagementAgent',
    'SecurityAuditAgent',
    'CodeWriterAgent'
  ];

  for($4) {
    console.log(`ü§ñ Testing transcription for ${agentType}`);
    console.log('‚îÄ'.repeat(50));

    try {
      // Test agent-specific transcription
      const result = await DeepgramService.transcribeForAgent(
        audioBuffer
        agentType
      );

      console.log('üìù Transcription Result:');
      console.log(`   Transcript: "${result.transcript}"`);
      console.log(`   Confidence: ${result.confidence}`);
      console.log(`   Language: ${result.language}`);

      if($4) {
        console.log(`   Summary: "${result.summary}"`);

      if($4) {
        console.log('üè∑Ô∏è  Topics Detected:');
        result.topics.forEach((topic, index) => {
          console.log(
            `   ${index + 1}. ${topic.topic} (confidence: ${topic.confidence || 'N/A'})`
          );
        });

      if($4) {
        console.log('üòä Sentiment Analysis:');
        console.log(`   Overall: ${result.sentiment.overall || 'N/A'}`);
        console.log(`   Score: ${result.sentiment.score || 'N/A'}`);

      if($4) {
        console.log('üéØ Intents Detected:');
        result.intents.forEach((intent, index) => {
          console.log(
            `   ${index + 1}. ${intent.intent} (confidence: ${intent.confidence || 'N/A'})`
          );
        });

      if($4) {
        console.log('üè¢ Entities Detected:');
        result.entities.forEach((entity, index) => {
          console.log(
            `   ${index + 1}. ${entity.label}: "${entity.value}" (confidence: ${entity.confidence || 'N/A'})`
          );
        });

      // Test audio intelligence analysis
      const intelligence = DeepgramService.analyzeAudioIntelligence(result);
      console.log('üß† Audio Intelligence Analysis:');
      console.log('   Emotional Analysis:', intelligence.emotional_analysis);
      console.log('   Speaker Analysis:', intelligence.speakers);
    } catch($4) {
      console.error(`‚ùå Error testing ${agentType}:`, error.message);

    console.log('\n');

  // Test wake word detection
  console.log('üéØ Testing Wake Word Detection');
  console.log('‚îÄ'.repeat(50));

  const testPhrases = [
    'Hey Cartrita, how are you today?',
    'Cartrita! Please help me with this task.',
    'I need assistance with something, cartrita',
    'This is a regular message without wake word'
  ];

  testPhrases.forEach(phrase => {
    const wakeWordResult = DeepgramService.detectWakeWord(phrase);
    console.log(`üì¢ "${phrase}"`);
    console.log(`   Wake word detected: ${wakeWordResult.detected}`);
    if($4) {
      console.log(`   Wake word: "${wakeWordResult.wakeWord}"`);
      console.log(`   Clean transcript: "${wakeWordResult.cleanTranscript}"`);

    console.log('');
  });

  // Test custom topics for each agent
  console.log('üè∑Ô∏è  Agent-Specific Topics Configuration');
  console.log('‚îÄ'.repeat(50));

  agentTypes.forEach(agentType => {
    const topics = DeepgramService.getCustomTopicsForAgent(agentType);
    const keyterms = DeepgramService.getKeytermsForContent(agentType);
    const keywords = DeepgramService.getKeywordsForAgent(agentType);

    console.log(`ü§ñ ${agentType}:`);
    console.log(`   Topics: ${topics || 'Default'}`);
    console.log(`   Keyterms: ${keyterms.join(', ')}`);
    console.log(`   Keywords: ${keywords}`);
    console.log('');
  });

  console.log('‚úÖ Enhanced Deepgram Service testing completed!');

// Run the test
if($4) {
  // Method implementation

} testEnhancedDeepgram().catch(error => {
    console.error('‚ùå Test failed:', error);
    process.exit(1);
  });

module.exports = testEnhancedDeepgram;
