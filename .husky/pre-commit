#!/usr/bin/env bash
set -e

echo "🔍 Running pre-commit security & lint checks..."

# Allow explicit bypass (e.g. for large refactors) SKIP_PRECOMMIT_SECURITY=1 git commit -m "..."
if [ "${SKIP_PRECOMMIT_SECURITY:-0}" = "1" ]; then
	echo "⚠️  Security checks bypassed via SKIP_PRECOMMIT_SECURITY=1"
else
	# Token patterns (tightened to reduce false positives: require minimum lengths)
	TOKEN_REGEX='sk-[A-Za-z0-9]{20,}|ghp_[A-Za-z0-9]{20,}|glpat-[A-Za-z0-9_-]{20,}|hf_[A-Za-z0-9]{20,}|AIza[0-9A-Za-z_-]{10,}|ENCRYPTION_KEY='

	# Limit secret grep to likely secret-bearing file types (avoid docs / workflows noise)
	if git diff --cached --name-only | grep -Eq '.'; then
		if git diff --cached -- '*.js' '*.ts' '*.tsx' '*.mjs' '*.cjs' '*.json' '*.env' 2>/dev/null | grep -E "$TOKEN_REGEX" >/dev/null; then
			echo "❌ Potential secret pattern found in staged code files."
			echo "   If this is a false positive (e.g. test fixture), either:"
			echo "     1) Mask/redact part of the token, OR"
			echo "     2) Use SKIP_PRECOMMIT_SECURITY=1 temporarily (NOT for real secrets)."
			exit 1
		fi
	fi

	# Optional: detect-secrets baseline differential scan
	if command -v detect-secrets >/dev/null 2>&1 && [ -f .secrets.baseline ]; then
		if ! detect-secrets scan --baseline .secrets.baseline >/dev/null; then
			echo "⚠️  detect-secrets reported potential issues (review: npm run secrets:audit)." >&2
		fi
	fi
fi

# Lint only changed files (fallback to full lint on failure)
if command -v git-format-staged >/dev/null 2>&1; then
	git-format-staged --formatter "eslint --fix" || eslint . --ext .js,.ts,.tsx || true
else
	eslint . --ext .js,.ts,.tsx || true
fi

echo "✅ Pre-commit checks passed"
exit 0
