import { promises as fs } from 'fs';
import path from 'path';

const DOCS = path.join(process.cwd(), 'docs');
const OUTPUT = path.join(DOCS, 'README.md');

const SECTION_ORDER = [
  'architecture',
  'roadmap',
  'security',
  'integrations',
  'observability',
  'iterations',
  'manuals',
  'specs',
  'maintenance',
  'whitepapers',
  'guides',
  'journal',
];

function titleCase(s) {
  return s.replace(/[-_]/g, ' ')
    .replace(/\b\w/g, c => c.toUpperCase());
}

async function readIfExists(p) {
  try { return await fs.readFile(p, 'utf8'); } catch { return null; }
}

async function collectDir(dir) {
  const abs = path.join(DOCS, dir);
  try {
    const entries = await fs.readdir(abs, { withFileTypes: true });
    const files = entries
      .filter(e => e.isFile() && e.name.toLowerCase().endsWith('.md'))
      .sort();
    const blocks = [];
    for (const f of files) {
      const full = path.join(abs, f.name);
      const content = await readIfExists(full);
      if (!content) continue;
      blocks.push(`### ${titleCase(f.name.replace(/\.md$/i,''))}\n\n${content.trim()}\n`);
    }
    if (blocks.length) {
      return `## ${titleCase(dir)}\n\n${blocks.join('\n')}`;
    }
  } catch { /* ignore */ }
  return '';
}

async function main() {
  const intro = `# Cartrita Multi-Agent Operating System\n\n(Autogenerated â€“ run \`node scripts/build-master-readme.mjs\` to refresh)\n`;
  const sections = [];
  for (const dir of SECTION_ORDER) {
    const block = await collectDir(dir);
    if (block) sections.push(block);
  }
  const journalHint = `\n---\nGenerated on ${new Date().toISOString()}\n`;
  await fs.writeFile(OUTPUT, intro + sections.join('\n\n') + journalHint);
  console.log('Updated docs/README.md');
}

main().catch(e => {
  console.error('Failed building master README:', e);
  process.exit(1);
});