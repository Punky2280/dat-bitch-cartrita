#!/bin/bash
# Protocol Buffer generation script for Cartrita MCP

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if buf is installed
if ! command -v buf &> /dev/null; then
    error "buf CLI is not installed. Please install it from https://buf.build/"
    exit 1
fi

log "Starting protobuf generation for Cartrita MCP..."

# Ensure output directories exist
mkdir -p ../packages/mcp-core/src/generated
mkdir -p ../py/mcp_core/generated
mkdir -p ../go/mcp

# Generate protobuf files
log "Generating TypeScript/JavaScript files..."
if buf generate --template buf.gen.yaml; then
    log "✅ TypeScript/JavaScript generation completed"
else
    error "❌ TypeScript/JavaScript generation failed"
    exit 1
fi

# Post-generation TypeScript fixes
log "Applying TypeScript post-generation fixes..."
TS_DIR="../packages/mcp-core/src/generated"

# Create index.ts file to re-export all generated types
cat > "${TS_DIR}/index.ts" << 'EOF'
// Auto-generated MCP protobuf exports
// This file is automatically generated by proto/generate.sh

export * from './mcp_pb';
export * from './mcp.client';
export { MCPMessage, TaskRequest, TaskResponse, StreamStart, StreamData, StreamEnd } from './mcp_pb';

// Type aliases for convenience
import { MCPMessage as ProtoMCPMessage, TaskRequest as ProtoTaskRequest } from './mcp_pb';
export type MCPMessageType = ProtoMCPMessage;
export type TaskRequestType = ProtoTaskRequest;
EOF

# Python post-generation fixes
log "Applying Python post-generation fixes..."
PY_DIR="../py/mcp_core/generated"

# Create __init__.py with proper imports
cat > "${PY_DIR}/__init__.py" << 'EOF'
"""Auto-generated MCP protobuf modules for Python."""

from .mcp_pb2 import *
from .mcp_pb2_grpc import *

# Type aliases for convenience
MCPMessageType = MCPMessage
TaskRequestType = TaskRequest
TaskResponseType = TaskResponse

__all__ = [
    'MCPMessage', 'TaskRequest', 'TaskResponse',
    'StreamStart', 'StreamData', 'StreamEnd',
    'AgentRegistration', 'HealthStatus',
    'MCPOrchestratorStub', 'MCPSupervisorStub', 'MCPAgentStub',
    'MCPMessageType', 'TaskRequestType', 'TaskResponseType'
]
EOF

# Create mypy.ini for type checking
cat > "${PY_DIR}/mypy.ini" << 'EOF'
[mypy]
python_version = 3.12
warn_return_any = True
warn_unused_configs = True
disallow_untyped_defs = True
check_untyped_defs = True

[mypy-google.protobuf.*]
ignore_missing_imports = True
EOF

log "✅ Post-generation fixes applied successfully"

# Validate generated files
log "Validating generated files..."

# Check TypeScript files
if [[ -f "${TS_DIR}/mcp_pb.ts" && -f "${TS_DIR}/index.ts" ]]; then
    log "✅ TypeScript files generated successfully"
else
    error "❌ TypeScript files missing"
    exit 1
fi

# Check Python files
if [[ -f "${PY_DIR}/mcp_pb2.py" && -f "${PY_DIR}/mcp_pb2_grpc.py" ]]; then
    log "✅ Python files generated successfully"
else
    error "❌ Python files missing"
    exit 1
fi

# Optional: Run linting on generated files
if command -v eslint &> /dev/null; then
    log "Running ESLint on generated TypeScript files..."
    (cd ../packages/mcp-core && npm run lint:generated || warn "ESLint warnings in generated files")
fi

if command -v ruff &> /dev/null; then
    log "Running Ruff on generated Python files..."
    (cd ../py && ruff check mcp_core/generated/ --fix || warn "Ruff warnings in generated files")
fi

log "🎉 Protocol buffer generation completed successfully!"
log "Generated files:"
log "  - TypeScript: packages/mcp-core/src/generated/"
log "  - Python: py/mcp_core/generated/"
log "  - Go: go/mcp/ (if needed)"

# Display file sizes for reference
log "Generated file sizes:"
find ../packages/mcp-core/src/generated -name "*.ts" -exec echo "  TS: {}" \; -exec du -h {} \;
find ../py/mcp_core/generated -name "*.py" -exec echo "  PY: {}" \; -exec du -h {} \;