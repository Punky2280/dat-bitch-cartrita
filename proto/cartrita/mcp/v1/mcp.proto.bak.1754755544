syntax = "proto3";

package cartrita.mcp.v1;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/Punky2280/dat-bitch-cartrita/go/gen/cartrita/mcp/v1;mcpv1";









// MCP Message envelope - the fundamental unit of communication

enum MessageType {
  MESSAGE_TYPE_UNSPECIFIED = 0;
  MESSAGE_TYPE_TASK_REQUEST = 1;
  MESSAGE_TYPE_TASK_RESPONSE = 2;
  MESSAGE_TYPE_STREAM_START = 3;
  MESSAGE_TYPE_STREAM_CHUNK = 4;
  MESSAGE_TYPE_STREAM_END = 5;
  MESSAGE_TYPE_EVENT = 6;
  MESSAGE_TYPE_ERROR = 7;
}

message MCPMessage {
  // Message metadata
  string id = 1;                    // Unique message identifier
  string correlation_id = 2;        // For request-response correlation
  string trace_id = 3;             // Distributed tracing identifier
  string span_id = 4;              // Span identifier within trace
  
  // Routing information
  string sender = 5;               // Sending agent/service identifier
  string recipient = 6;            // Target agent/service identifier
  MessageType message_type = 7;         // TASK_REQUEST, TASK_RESPONSE, STREAM_START, etc.
  
  // Message content
  google.protobuf.Any payload = 8; // Actual message data
  repeated string tags = 9;        // Optional message tags
  
  // Context and metadata
  MCPContext context = 10;         // Execution context
  DeliveryOptions delivery = 11;   // Delivery guarantees and options
  
  // Timestamps
  google.protobuf.Timestamp created_at = 12;
  google.protobuf.Timestamp expires_at = 13;
  
  // Security
  string security_token = 14;      // JWT or similar auth token
  repeated string permissions = 15; // Required permissions
}

// Execution context propagated with messages
message MCPContext {
  // Distributed tracing context
  string trace_id = 1;
  string span_id = 2;
  string parent_span_id = 3;
  map<string, string> baggage = 4;
  
  // User and session context
  string user_id = 5;
  string session_id = 6;
  string workspace_id = 7;
  
  // Request context
  string request_id = 8;
  int64 timeout_ms = 9;
  map<string, string> metadata = 10;
  
  // Budget and limits
  CostBudget budget = 11;
  ResourceLimits limits = 12;
}

// Cost and budget management
message CostBudget {
  double max_usd = 1;              // Maximum USD spend
  int32 max_tokens = 2;            // Maximum token usage
  double used_usd = 3;             // Current USD spent
  int32 used_tokens = 4;           // Current tokens used
  map<string, double> model_costs = 5; // Per-model cost tracking
}

// Resource limits
message ResourceLimits {
  int32 max_cpu_percent = 1;       // Maximum CPU utilization
  int64 max_memory_mb = 2;         // Maximum memory usage
  int32 max_concurrent_requests = 3; // Request concurrency limit
  int64 max_processing_time_ms = 4; // Maximum processing time
}

// Delivery options for message transport
message DeliveryOptions {
  DeliveryGuarantee guarantee = 1;
  int32 retry_count = 2;
  int64 retry_delay_ms = 3;
  bool require_ack = 4;
  int32 priority = 5;              // Higher numbers = higher priority
}

enum DeliveryGuarantee {
  AT_MOST_ONCE = 0;    // Fire and forget
  AT_LEAST_ONCE = 1;   // Retry until success
  EXACTLY_ONCE = 2;    // Idempotent with deduplication
}

// Task request payload
message TaskRequest {
  string task_type = 1;            // e.g., "huggingface.vision.classify"
  string task_id = 2;              // Unique task identifier
  google.protobuf.Any parameters = 3; // Task-specific parameters
  map<string, string> metadata = 4;
  string preferred_agent = 5;      // Optional agent preference
  int32 priority = 6;              // Task priority
  google.protobuf.Timestamp deadline = 7; // Task deadline
}

// Task response payload
message TaskResponse {
  string task_id = 1;
  TaskStatus status = 2;
  google.protobuf.Any result = 3;  // Task result data
  string error_message = 4;        // Error description if failed
  string error_code = 5;           // Machine-readable error code
  TaskMetrics metrics = 6;         // Task execution metrics
  repeated string warnings = 7;    // Non-fatal warnings
}

enum TaskStatus {
  TASK_PENDING = 0;
  TASK_RUNNING = 1;
  TASK_COMPLETED = 2;
  TASK_FAILED = 3;
  TASK_CANCELLED = 4;
  TASK_TIMEOUT = 5;
}

// Task execution metrics
message TaskMetrics {
  int64 processing_time_ms = 1;
  int64 queue_time_ms = 2;
  int32 retry_count = 3;
  double cost_usd = 4;
  int32 tokens_used = 5;
  string model_used = 6;
  map<string, double> custom_metrics = 7;
}

// Streaming message payloads
message StreamStart {
  string stream_id = 1;
  string content_type = 2;         // e.g., "audio/pcm", "application/json"
  map<string, string> metadata = 3;
  int64 estimated_size = 4;        // Estimated total size in bytes
}

message StreamData {
  string stream_id = 1;
  int32 sequence = 2;              // Sequence number for ordering
  bytes data = 3;                  // Chunk data
  bool is_final = 4;               // True for last chunk
}

message StreamEnd {
  string stream_id = 1;
  StreamStatus status = 2;
  string error_message = 3;
  int64 total_bytes = 4;           // Actual total bytes transmitted
}

enum StreamStatus {
  STREAM_COMPLETED = 0;
  STREAM_CANCELLED = 1;
  STREAM_FAILED = 2;
}

// Agent registration and discovery
message AgentRegistration {
  string agent_id = 1;
  string agent_name = 2;
  AgentType type = 3;
  string version = 4;
  repeated string capabilities = 5; // Supported task types
  map<string, string> metadata = 6;
  HealthStatus health = 7;
  google.protobuf.Timestamp registered_at = 8;
}

enum AgentType {
  ORCHESTRATOR = 0;    // Tier 0
  SUPERVISOR = 1;      // Tier 1
  SUB_AGENT = 2;      // Tier 2
}

message HealthStatus {
  bool healthy = 1;
  string status_message = 2;
  double cpu_usage = 3;
  int64 memory_mb = 4;
  int32 active_tasks = 5;
  google.protobuf.Timestamp last_heartbeat = 6;
}

// System control messages
message SystemCommand {
  CommandType type = 1;
  google.protobuf.Any payload = 2;
  string reason = 3;
}

enum CommandType {
  SHUTDOWN = 0;
  RESTART = 1;
  SCALE_UP = 2;
  SCALE_DOWN = 3;
  HEALTH_CHECK = 4;
  CONFIG_UPDATE = 5;
}

// Service definitions
service MCPOrchestrator {
  // Message routing
  rpc RouteMessage(MCPMessage) returns (MCPMessage);
  rpc StreamMessages(stream MCPMessage) returns (stream MCPMessage);
  
  // Agent management
  rpc RegisterAgent(AgentRegistration) returns (AgentRegistration);
  rpc GetAgentHealth(HealthCheckRequest) returns (HealthStatus);
  
  // System control
  rpc ExecuteCommand(SystemCommand) returns (SystemCommandResponse);
}

service MCPSupervisor {
  // Task processing
  rpc ProcessTask(TaskRequest) returns (TaskResponse);
  rpc StreamTask(stream TaskRequest) returns (stream TaskResponse);
  
  // Agent coordination
  rpc DelegateTask(TaskRequest) returns (TaskResponse);
  rpc GetCapabilities(CapabilitiesRequest) returns (CapabilitiesResponse);
}

service MCPAgent {
  // Core agent operations
  rpc ExecuteTask(TaskRequest) returns (TaskResponse);
  rpc GetStatus(StatusRequest) returns (AgentStatus);
  rpc UpdateConfig(ConfigUpdate) returns (ConfigUpdateResponse);
}

// Supporting message types
message HealthCheckRequest {
  string agent_id = 1;
}

message SystemCommandResponse {
  bool success = 1;
  string message = 2;
  google.protobuf.Any result = 3;
}

message CapabilitiesRequest {
  string supervisor_id = 1;
}

message CapabilitiesResponse {
  repeated string task_types = 1;
  repeated AgentCapability agent_capabilities = 2;
}

message AgentCapability {
  string agent_id = 1;
  string agent_name = 2;
  repeated string task_types = 3;
  ResourceLimits limits = 4;
  map<string, string> metadata = 5;
}

message StatusRequest {
  string agent_id = 1;
  bool include_metrics = 2;
}

message AgentStatus {
  string agent_id = 1;
  bool healthy = 2;
  string status_message = 3;
  TaskMetrics current_metrics = 4;
  int32 queue_depth = 5;
  google.protobuf.Timestamp last_activity = 6;
}

message ConfigUpdate {
  string agent_id = 1;
  map<string, string> config_changes = 2;
  bool restart_required = 3;
}

message ConfigUpdateResponse {
  bool success = 1;
  string message = 2;
  bool restart_scheduled = 3;
}
