# Cartrita V2 Multi-Agent OS Frontend - Production Dockerfile
FROM node:20-alpine AS base

WORKDIR /app

# Install dependencies for native modules
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    dumb-init

# Copy package files
COPY package*.json ./
COPY packages/frontend/package*.json ./packages/frontend/
COPY packages/shared/package*.json ./packages/shared/
COPY packages/ui/package*.json ./packages/ui/
COPY packages/config/package*.json ./packages/config/

# Development stage
FROM base AS development
ENV NODE_ENV=development

# Install all dependencies
RUN npm ci --workspace=packages/frontend --workspace=packages/shared --workspace=packages/ui --workspace=packages/config

# Copy source code
COPY . .

USER node

EXPOSE 5173

CMD ["dumb-init", "npm", "run", "dev:frontend"]

# Build stage
FROM base AS build
ENV NODE_ENV=production

# Install dependencies
RUN npm ci --workspace=packages/frontend --workspace=packages/shared --workspace=packages/ui --workspace=packages/config

# Copy source code
COPY packages/frontend ./packages/frontend
COPY packages/shared ./packages/shared
COPY packages/ui ./packages/ui
COPY packages/config ./packages/config
COPY tsconfig.json ./
COPY vite.config.js ./
COPY .eslintrc.js ./
COPY postcss.config.cjs ./

# Build the frontend
WORKDIR /app/packages/frontend
RUN npm run build

# Production stage
FROM nginx:alpine AS production

# Copy custom nginx configuration
COPY config/nginx-frontend.conf /etc/nginx/conf.d/default.conf

# Copy built assets
COPY --from=build /app/packages/frontend/dist /usr/share/nginx/html

# Copy additional static assets
COPY --from=build /app/packages/ui/dist /usr/share/nginx/html/ui

# Create nginx user and set permissions
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /etc/nginx/conf.d

# Add health check script
RUN echo '#!/bin/sh\ncurl -f http://localhost/ || exit 1' > /healthcheck.sh && \
    chmod +x /healthcheck.sh

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD /healthcheck.sh

# Use nginx user
USER nginx

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]