# Cartrita Unified Development Environment
# Docker Compose configuration for V1 + V2 simultaneous development
version: '3.9'

networks:
  cartrita-dev:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

volumes:
  postgres_data_unified:
  redis_data_unified:
  uploads_v1:
  uploads_v2:
  logs_unified:

services:
  # Shared Database (PostgreSQL with pgvector)
  postgres:
    image: pgvector/pgvector:pg16
    container_name: cartrita-postgres-unified
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-robert}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-punky1}
      POSTGRES_DB: ${POSTGRES_DB:-dat-bitch-cartrita}
      POSTGRES_INITDB_ARGS: '--encoding=UTF-8'
    volumes:
      - postgres_data_unified:/var/lib/postgresql/data
      - ./db-init:/docker-entrypoint-initdb.d
    ports:
      - '5432:5432'
    networks:
      cartrita-dev:
        ipv4_address: 172.21.0.10
    command: >
      postgres
      -c shared_preload_libraries=vector
      -c log_statement=all
      -c log_destination=stderr
      -c logging_collector=on
      -c log_min_messages=info
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-robert} -d ${POSTGRES_DB:-dat-bitch-cartrita}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Shared Redis
  redis:
    image: redis:7-alpine
    container_name: cartrita-redis-unified
    ports:
      - '6379:6379'
    volumes:
      - redis_data_unified:/data
    networks:
      cartrita-dev:
        ipv4_address: 172.21.0.11
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # V1 Backend (Original)
  backend-v1:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: cartrita-backend-v1
    environment:
      - NODE_ENV=development
      - PORT=8000
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER:-robert}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-punky1}
      - POSTGRES_DB=${POSTGRES_DB:-dat-bitch-cartrita}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-robert}:${POSTGRES_PASSWORD:-punky1}@postgres:5432/${POSTGRES_DB:-dat-bitch-cartrita}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET:-cartrita-super-secret-jwt-key-that-should-be-changed-in-production-2024}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DEEPGRAM_API_KEY=${DEEPGRAM_API_KEY}
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY}
      - HF_TOKEN=${HF_TOKEN}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - OTEL_SERVICE_NAME=cartrita-backend-v1
      - FRONTEND_URL=http://localhost:3000
    volumes:
      - ./packages/backend:/usr/src/app/packages/backend
      - ./packages/shared:/usr/src/app/packages/shared
      - uploads_v1:/usr/src/app/packages/backend/uploads
      - logs_unified:/usr/src/app/logs
      - /usr/src/app/packages/backend/node_modules
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      cartrita-dev:
        ipv4_address: 172.21.0.20
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    command: npm run dev

  # V2 Backend (Enhanced)
  backend-v2:
    build:
      context: .
      dockerfile: packages/cartrita-v2/Dockerfile
      target: development
    container_name: cartrita-backend-v2
    environment:
      - NODE_ENV=development
      - V2_PORT=3002
      - PORT=3002
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER:-robert}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-punky1}
      - POSTGRES_DB=${POSTGRES_DB:-dat-bitch-cartrita}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-robert}:${POSTGRES_PASSWORD:-punky1}@postgres:5432/${POSTGRES_DB:-dat-bitch-cartrita}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET:-cartrita-super-secret-jwt-key-that-should-be-changed-in-production-2024}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DEEPGRAM_API_KEY=${DEEPGRAM_API_KEY}
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY}
      - HF_TOKEN=${HF_TOKEN}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - OTEL_SERVICE_NAME=cartrita-backend-v2
      - CORS_ORIGIN=http://localhost:3000,http://localhost:5173
    volumes:
      - ./packages/cartrita-v2:/usr/src/app/packages/cartrita-v2
      - uploads_v2:/usr/src/app/packages/cartrita-v2/uploads
      - logs_unified:/usr/src/app/logs
      - /usr/src/app/packages/cartrita-v2/node_modules
    ports:
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      cartrita-dev:
        ipv4_address: 172.21.0.21
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    working_dir: /usr/src/app/packages/cartrita-v2
    command: npm run dev

  # V1 Frontend (React)
  frontend-v1:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: development
    container_name: cartrita-frontend-v1
    environment:
      - NODE_ENV=development
      - VITE_BACKEND_URL=http://localhost:8000
      - VITE_WS_URL=ws://localhost:8000
      - VITE_APP_VERSION=1.0.0
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./packages/frontend:/usr/src/app/packages/frontend
      - ./packages/shared:/usr/src/app/packages/shared
      - ./packages/ui-components:/usr/src/app/packages/ui-components
      - /usr/src/app/packages/frontend/node_modules
    ports:
      - "3000:3000"
    networks:
      cartrita-dev:
        ipv4_address: 172.21.0.30
    restart: unless-stopped
    working_dir: /usr/src/app/packages/frontend
    command: npm run dev

  # V2 Frontend (Enhanced React/Next.js)
  frontend-v2:
    build:
      context: .
      dockerfile: packages/cartrita-v2/frontend.Dockerfile
      target: development
    container_name: cartrita-frontend-v2
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:3002
      - VITE_WS_URL=ws://localhost:3002
      - VITE_APP_VERSION=2.0.0
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./packages/cartrita-v2/frontend:/usr/src/app/packages/cartrita-v2/frontend
      - /usr/src/app/packages/cartrita-v2/frontend/node_modules
    ports:
      - "5173:5173"
    networks:
      cartrita-dev:
        ipv4_address: 172.21.0.31
    restart: unless-stopped
    working_dir: /usr/src/app/packages/cartrita-v2/frontend
    command: npm run dev

  # Development Tools
  adminer:
    image: adminer:latest
    container_name: cartrita-adminer
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      cartrita-dev:
        ipv4_address: 172.21.0.40
    restart: unless-stopped

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: cartrita-redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      cartrita-dev:
        ipv4_address: 172.21.0.41
    restart: unless-stopped